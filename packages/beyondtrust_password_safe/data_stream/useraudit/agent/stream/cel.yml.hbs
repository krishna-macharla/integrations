config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
request.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.ssl.renegotiation: "freely"
resource.ssl.verification_mode: "certificate"
resource.url: {{url}}
state:
  {{!-- apikey: PS-Auth key={{apikeytoken}};runas={{username}};pwd={{password}} --}}
  apikey: {{apikeytoken}}
  want_more: false
  initial_interval: {{initial_interval}}
  limit: {{limit}}
  offset: {{offset}}
redact:
  fields:
    - apikey 
program: |-
  // Check auth_cookie is presnt or not if not then call the /Auth/SignAppIn API if present the call /UserAudits API
  (!has(state.cursor) || has(state.cursor) && has(state.cursor.auth_cookie) && state.cursor.auth_cookie == null) ?
  	(
  		// Authenticating using API to retrieve auth Cookie
  		request("POST", state.url + "/Auth/SignAppin").with(
  			{
  				"Header": {
  					"Authorization": [state.apikey],
  					"Content-Type": ["application/json"],
  				},
  			}
  		).do_request().as(resp, (resp.StatusCode != 200) ?
  			{
  				"events": {
  					"error": {
  						"code": string(resp.StatusCode),
  						"id": string(resp.Status),
  						"message": "POST:" + 
  						(
  							(size(resp.Body) != 0) ?
  								string(resp.Body)
  							:
  								string(resp.Status) + " (" + string(resp.StatusCode) + ")"
  						),
  					},
  				},
  				"want_more": false,
  			}
  		:
  			resp.Header["Set-Cookie"].filter(e, e.contains("ASP.NET_SessionId")).as(sess, (sess.size() > 0) ?
  				(sess[0])
  			:
  				""
  			)
  		).as(auth_cookie,
  			// submit get UserAudits query to get audit event logs
  			request(
  				"GET",
  				state.url + "/UserAudits" + "?" + {
  					"limit": [string(state.limit)],
  					"offset": [string(state.offset)],
  				}.format_query()
  			).with(
  				{
  					"Header": {
  						"Content-Type": ["application/json"],
  						"Cookie": [auth_cookie],
  					},
  				}
  			).do_request().as(resp,
  				(resp.StatusCode == 200) ?
  					bytes(resp.Body).decode_json().as(body,
  						state.with(
  							{
  								"events": body.Data.map(e, {"message": e.encode_json()}),
  								"want_more": true,
  								"cursor": {
  									"auth_cookie": auth_cookie,
  									"limit": int(state.limit),
  									"offset": int(state.offset) + int(state.limit),
  								},
  							}
  						)
  					)
  				:
  					state.with(
  						{
  							"events": {
  								"error": {
  									"message": "Error " + bytes(resp.Body).decode_json().as(body, body.message),
  								},
  							},
  							"want_more": false,
  							"cursor": state.cursor.with(
  								{
  									"auth_cookie": null,
  									"limit": 0,
  									"offset": 0,
  								}
  							),
  						}
  					)
  			)
  		)
  	)
  :
  	// auth_cookie is present so submit get UserAudits query to get audit event logs
  	request(
  		"GET",
  		state.url + "/UserAudits" + "?" + {
  			"limit": [string(state.limit)],
  			"offset": [string(state.offset)],
  		}.format_query()
  	).with(
  		{
  			"Header": {
  				"Content-Type": ["application/json"],
  				"Cookie": [state.cursor.auth_cookie],
  			},
  		}
  	).do_request().as(resp,
  		(resp.StatusCode == 200) ?
  			bytes(resp.Body).decode_json().as(body,
  				state.with(
  					{
  						"events": body.Data.map(e, {"message": e.encode_json()}),
  						"want_more": true,
  						"cursor": {
  							"auth_cookie": state.cursor.auth_cookie,
  							"limit": int(state.limit),
  							"offset": int(state.offset) + int(state.limit),
  						},
  					}
  				)
  			)
  		:
  			state.with(
  				{
  					"events": {
  						"error": {
  							"message": "Error " + bytes(resp.Body).decode_json().as(body, body.message),
  						},
  					},
  					"want_more": false,
  					"cursor": state.cursor.with(
  						{
  							"auth_cookie": null,
  							"limit": 0,
  							"offset": 0,
  						}
  					),
  				}
  			)
  	)
