config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
request.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.ssl.renegotiation: "freely"
resource.ssl.verification_mode: "certificate"
resource.url: {{url}}
state:
  apikey: {{apikeytoken}}
  want_more: false
  initial_interval: {{initial_interval}}
  limit: {{limit}}
redact:
  fields:
    - apikey
program: |-
  
  (
  	(!has(state.cursor) || !has(state.cursor.auth_cookie) || state.cursor.auth_cookie == null) ?
  		// Authenticating using API to retrieve auth Cookie
  		request("POST", state.url + "/Auth/SignAppin").with(
  			{
  				"Header": {
  					"Authorization": [state.apikey],
  					"Content-Type": ["application/json"],
  				},
  			}
  		).do_request().as(resp,
  			resp.Header["Set-Cookie"].filter(e, e.contains("ASP.NET_SessionId")).as(auth_cookie,
  				auth_cookie[0]
  			)
  		)
  	:
  		state.cursor.auth_cookie
  ).as(auth_cookie,
  	request(
  		"GET",
  		state.url + "/UserAudits?" + {
  			"limit": [string(state.limit)],
  		}.format_query()
  	).with(
  		{
  			"Header": {
  				"Content-Type": ["application/json"],
  				"Cookie": [auth_cookie],
  			},
  		}
  	).do_request().as(resp,
  		bytes(resp.Body).decode_json().as(body,
  			state.with(
  				{
  					"events": body.Data.map(e, {"message": e.encode_json()}),
  					"want_more": true,
  					"cursor": {
  						"auth_cookie": auth_cookie,
  					},
  				}
  			)
  		)
  	)
  )
